================================================================================
Global attributes
================================================================================

[assembly: Single]
[module: A, C()]

--------------------------------------------------------------------------------

(compilation_unit
  attributes: (global_attribute_list
    attribute: (attribute
      name: (identifier)))
  attributes: (global_attribute_list
    attribute: (attribute
      name: (identifier))
    attribute: (attribute
      name: (identifier)
      arguments: (attribute_argument_list))))

================================================================================
Attributes with arguments
================================================================================

[A(B.C)]
class D {}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)
        arguments: (attribute_argument_list
          argument: (attribute_argument
            expression: (member_access_expression
              expression: (identifier)
              name: (identifier))))))
    name: (identifier)
    body: (declaration_list)))

================================================================================
Attributes with qualified name
================================================================================

[NS.A(B.C)]
class D {}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    (attribute_list
      attribute: (attribute
        name: (qualified_name
          left: (identifier)
          right: (identifier))
        arguments: (attribute_argument_list
          argument: (attribute_argument
            expression: (member_access_expression
              expression: (identifier)
              name: (identifier))))))
    name: (identifier)
    body: (declaration_list)))

================================================================================
Attributes on classes
================================================================================

[Single]
class A { }

[One][Two]
[Three]
class A { }

[One]
[Two,Three()]
class A { }

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    name: (identifier)
    body: (declaration_list))
  declaration: (class_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    name: (identifier)
    body: (declaration_list))
  declaration: (class_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier))
      attribute: (attribute
        name: (identifier)
        arguments: (attribute_argument_list)))
    name: (identifier)
    body: (declaration_list)))

================================================================================
Attributes on structs
================================================================================

[A,B()][C]
struct A { }

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (struct_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier))
      attribute: (attribute
        name: (identifier)
        arguments: (attribute_argument_list)))
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    name: (identifier)
    body: (declaration_list)))

================================================================================
Attributes on fields
================================================================================

class Zzz {
  [A,B()][C]
  public int Z;
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (field_declaration
        (attribute_list
          attribute: (attribute
            name: (identifier))
          attribute: (attribute
            name: (identifier)
            arguments: (attribute_argument_list)))
        (attribute_list
          attribute: (attribute
            name: (identifier)))
        modifier: (modifier)
        declaration: (variable_declaration
          type: (predefined_type)
          variable_declarator: (variable_declarator
            name: (identifier)))))))

================================================================================
Attributes on methods
================================================================================

class Methods {
  [ValidatedContract]
  int Method1() { return 0; }

  [method: ValidatedContract]
  int Method2() { return 0; }

  [return: ValidatedContract]
  int Method3() { return 0; }
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (method_declaration
        (attribute_list
          attribute: (attribute
            name: (identifier)))
        type: (predefined_type)
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          statement: (return_statement
            expression: (integer_literal))))
      declaration: (method_declaration
        (attribute_list
          (attribute_target_specifier)
          attribute: (attribute
            name: (identifier)))
        type: (predefined_type)
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          statement: (return_statement
            expression: (integer_literal))))
      declaration: (method_declaration
        (attribute_list
          (attribute_target_specifier)
          attribute: (attribute
            name: (identifier)))
        type: (predefined_type)
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          statement: (return_statement
            expression: (integer_literal)))))))

================================================================================
Attributes on enums
================================================================================

[Single]
enum A { B, C }

[One][Two]
[Three]
enum A { B, C }

[One]
[Two,Three()]
enum A { B, C }

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (enum_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    name: (identifier)
    body: (enum_member_declaration_list
      (enum_member_declaration
        name: (identifier))
      (enum_member_declaration
        name: (identifier))))
  declaration: (enum_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    name: (identifier)
    body: (enum_member_declaration_list
      (enum_member_declaration
        name: (identifier))
      (enum_member_declaration
        name: (identifier))))
  declaration: (enum_declaration
    (attribute_list
      attribute: (attribute
        name: (identifier)))
    (attribute_list
      attribute: (attribute
        name: (identifier))
      attribute: (attribute
        name: (identifier)
        arguments: (attribute_argument_list)))
    name: (identifier)
    body: (enum_member_declaration_list
      (enum_member_declaration
        name: (identifier))
      (enum_member_declaration
        name: (identifier)))))

================================================================================
Attributes on events
================================================================================

class Zzz {
  [A,B()][C]
  public event EventHandler SomeEvent { add { } remove { } }
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (event_declaration
        (attribute_list
          attribute: (attribute
            name: (identifier))
          attribute: (attribute
            name: (identifier)
            arguments: (attribute_argument_list)))
        (attribute_list
          attribute: (attribute
            name: (identifier)))
        modifier: (modifier)
        type: (identifier)
        name: (identifier)
        accessors: (accessor_list
          accessor: (accessor_declaration
            body: (block))
          accessor: (accessor_declaration
            body: (block)))))))

================================================================================
Attributes on type parameters
================================================================================

class Class<[A, B][C()]T1> {
  void Method<[E] [F, G(1)] T2>() {
  }
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    name: (identifier)
    type_parameters: (type_parameter_list
      type_parameter: (type_parameter
        (attribute_list
          attribute: (attribute
            name: (identifier))
          attribute: (attribute
            name: (identifier)))
        (attribute_list
          attribute: (attribute
            name: (identifier)
            arguments: (attribute_argument_list)))
        name: (identifier)))
    body: (declaration_list
      declaration: (method_declaration
        type: (predefined_type)
        name: (identifier)
        type_parameters: (type_parameter_list
          type_parameter: (type_parameter
            (attribute_list
              attribute: (attribute
                name: (identifier)))
            (attribute_list
              attribute: (attribute
                name: (identifier))
              attribute: (attribute
                name: (identifier)
                arguments: (attribute_argument_list
                  argument: (attribute_argument
                    expression: (integer_literal)))))
            name: (identifier)))
        parameters: (parameter_list)
        body: (block)))))

================================================================================
Attributes on event accessors
================================================================================

class Zzz {
  public event EventHandler SomeEvent {
    [A,B()][C] add { }
    [A,B()][C] remove { }
  }
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (event_declaration
        modifier: (modifier)
        type: (identifier)
        name: (identifier)
        accessors: (accessor_list
          accessor: (accessor_declaration
            (attribute_list
              attribute: (attribute
                name: (identifier))
              attribute: (attribute
                name: (identifier)
                arguments: (attribute_argument_list)))
            (attribute_list
              attribute: (attribute
                name: (identifier)))
            body: (block))
          accessor: (accessor_declaration
            (attribute_list
              attribute: (attribute
                name: (identifier))
              attribute: (attribute
                name: (identifier)
                arguments: (attribute_argument_list)))
            (attribute_list
              attribute: (attribute
                name: (identifier)))
            body: (block)))))))

================================================================================
Attributes with trailing comma
================================================================================
[Theory,]
void A() { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      (attribute_list
        attribute: (attribute
          name: (identifier)))
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block))))

================================================================================
Generic attribute
================================================================================
[Theory<About,Life>]
void A() { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      (attribute_list
        attribute: (attribute
          name: (generic_name
            name: (identifier)
            type_arguments: (type_argument_list
              type: (identifier)
              type: (identifier)))))
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block))))

================================================================================
Lambda with attribute
================================================================================

var greeting = [Hello] () => Console.WriteLine("hello");

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_declaration_statement
      declaration: (variable_declaration
        type: (implicit_type)
        variable_declarator: (variable_declarator
          name: (identifier)
          initializer: (equals_value_clause
            value: (lambda_expression
              (attribute_list
                attribute: (attribute
                  name: (identifier)))
              parameters: (parameter_list)
              body: (invocation_expression
                function: (member_access_expression
                  expression: (identifier)
                  name: (identifier))
                arguments: (argument_list
                  argument: (argument
                    expression: (string_literal
                      (string_literal_fragment))))))))))))
