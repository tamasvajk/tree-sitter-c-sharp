================================================================================
From keyword can be a variable
================================================================================

var a = Assert.Range(from, to);

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_declaration_statement
      declaration: (variable_declaration
        type: (implicit_type)
        variable_declarator: (variable_declarator
          name: (identifier)
          initializer: (equals_value_clause
            value: (invocation_expression
              function: (member_access_expression
                expression: (identifier)
                name: (identifier))
              arguments: (argument_list
                argument: (argument
                  expression: (identifier))
                argument: (argument
                  expression: (identifier))))))))))

================================================================================
File keyword in invocation
================================================================================

file.Method(1, 2);

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (expression_statement
      (invocation_expression
        function: (member_access_expression
          expression: (identifier)
          name: (identifier))
        arguments: (argument_list
          argument: (argument
            expression: (integer_literal))
          argument: (argument
            expression: (integer_literal)))))))

================================================================================
File contextual keyword
================================================================================

void file() { }
void m(file p) { }
void m(int file) { }
void m()
{
    file v = null;
    int file = file;

    file();
    m(file);

    var x = file + 1;
}

file class file { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (identifier)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (identifier)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (predefined_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (identifier)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list)))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (binary_expression
                  left: (identifier)
                  right: (integer_literal)))))))))
  declaration: (class_declaration
    modifier: (modifier)
    name: (identifier)
    body: (declaration_list)))

================================================================================
Scoped contextual keyword
================================================================================

void scoped() { }
void m(scoped p) { }
void m(scoped ref int p) { }
void m(scoped ref scoped p) { }
void m(int scoped) { }
void m()
{
    scoped v = null;
    scoped ref int v = null;
    scoped ref scoped v = null;
    int scoped = null;

    scoped();
    m(scoped);

    var x = scoped + 1;
    var l = scoped => null;
    var l = (scoped i) => null;
    var l = (scoped, i) => null;
    var l = scoped (int i, int j) => null;
}

class scoped { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (identifier)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          (parameter_modifier)
          (parameter_modifier)
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          (parameter_modifier)
          (parameter_modifier)
          type: (identifier)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (identifier)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (scoped_type
              type: (ref_type
                type: (predefined_type)))
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (scoped_type
              type: (ref_type
                type: (identifier)))
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (predefined_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list)))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (binary_expression
                  left: (identifier)
                  right: (integer_literal))))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (lambda_expression
                  parameters: (implicit_parameter_list
                    (parameter
                      name: (identifier)))
                  body: (null_literal))))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (lambda_expression
                  parameters: (parameter_list
                    parameter: (parameter
                      type: (identifier)
                      name: (identifier)))
                  body: (null_literal))))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (lambda_expression
                  parameters: (parameter_list
                    parameter: (parameter
                      name: (identifier))
                    parameter: (parameter
                      name: (identifier)))
                  body: (null_literal))))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (lambda_expression
                  (identifier)
                  parameters: (parameter_list
                    parameter: (parameter
                      type: (predefined_type)
                      name: (identifier))
                    parameter: (parameter
                      type: (predefined_type)
                      name: (identifier)))
                  body: (null_literal)))))))))
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list)))

================================================================================
Set contextual keyword
================================================================================

void set() { }
void m(set p) { }
void m(int set) { }
void m()
{
    set v = null;
    int set = set;

    set();
    m(set);

    var x = set + 1;
}

class set { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (identifier)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (identifier)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (predefined_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (identifier)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list)))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (binary_expression
                  left: (identifier)
                  right: (integer_literal)))))))))
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list)))

================================================================================
Var contextual keyword
================================================================================

void var() { }
void m(var p) { }
void m(int var) { }
void m()
{
    var v = null;
    int var = var;
    var var = 1;

    var();
    m(var);

    var x = var + 1;
}

class var { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (implicit_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (predefined_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (integer_literal)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list)))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (binary_expression
                  left: (identifier)
                  right: (integer_literal)))))))))
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list)))

================================================================================
Nameof contextual keyword
================================================================================

void nameof() { }
void m(nameof p) { }
void m(int nameof) { }
void m()
{
    nameof v = null;
    int nameof = nameof;

    nameof();
    nameof(a, b);
    m(nameof);

    var x = nameof + 1;
}

class nameof { }

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (identifier)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (predefined_type)
          name: (identifier)))
      body: (block)))
  statement: (global_statement
    (local_function_statement
      type: (predefined_type)
      name: (identifier)
      parameters: (parameter_list)
      body: (block
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (identifier)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (null_literal)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (predefined_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (identifier)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list)))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier))
              argument: (argument
                expression: (identifier)))))
        statement: (expression_statement
          (invocation_expression
            function: (identifier)
            arguments: (argument_list
              argument: (argument
                expression: (identifier)))))
        statement: (local_declaration_statement
          declaration: (variable_declaration
            type: (implicit_type)
            variable_declarator: (variable_declarator
              name: (identifier)
              initializer: (equals_value_clause
                value: (binary_expression
                  left: (identifier)
                  right: (integer_literal)))))))))
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list)))
