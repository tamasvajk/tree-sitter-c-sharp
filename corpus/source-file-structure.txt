================================================================================
Using directives
================================================================================

using A;
using B.C;
using global::E.F;
using G = H.I;
using static J.K;

--------------------------------------------------------------------------------

(compilation_unit
  using: (using_directive
    name: (identifier))
  using: (using_directive
    name: (qualified_name
      left: (identifier)
      right: (identifier)))
  using: (using_directive
    name: (qualified_name
      left: (alias_qualified_name
        alias: (identifier)
        name: (identifier))
      right: (identifier)))
  using: (using_directive
    alias: (name_equals
      name: (identifier))
    name: (qualified_name
      left: (identifier)
      right: (identifier)))
  using: (using_directive
    name: (qualified_name
      left: (identifier)
      right: (identifier))))

================================================================================
Nested using directives
================================================================================

namespace Foo {
  using A;
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (namespace_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (using_directive
        name: (identifier)))))

================================================================================
Global using directives
================================================================================

global using A;
global using static A.B;

--------------------------------------------------------------------------------

(compilation_unit
  using: (using_directive
    name: (identifier))
  using: (using_directive
    name: (qualified_name
      left: (identifier)
      right: (identifier))))

================================================================================
Comments
================================================================================

// I'm a single-line comment

/*
 *  I'm a block comment: a * b / c
 */

--------------------------------------------------------------------------------

(compilation_unit
  (comment)
  (comment))

================================================================================
Comment with double asterisk
================================================================================

/** test **/

--------------------------------------------------------------------------------

(compilation_unit
  (comment))

================================================================================
Namespaces
================================================================================

namespace A {
  namespace B.C.D {
  }

  namespace E.F {
  }
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (namespace_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (namespace_declaration
        name: (qualified_name
          left: (qualified_name
            left: (identifier)
            right: (identifier))
          right: (identifier))
        body: (declaration_list))
      declaration: (namespace_declaration
        name: (qualified_name
          left: (identifier)
          right: (identifier))
        body: (declaration_list)))))

================================================================================
File scoped namespaces
================================================================================

namespace A;

class B {
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (file_scoped_namespace_declaration
    name: (identifier)
    declaration: (class_declaration
      name: (identifier)
      body: (declaration_list))))

================================================================================
Interfaces
================================================================================

public interface IFoo {
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (interface_declaration
    modifier: (modifier)
    name: (identifier)
    body: (declaration_list)))

================================================================================
Externs
================================================================================

extern alias A;

--------------------------------------------------------------------------------

(compilation_unit
  extern_alias: (extern_alias_directive
    name: (identifier)))

================================================================================
Delegates
================================================================================

public delegate int Global(ref char a = '\n');
public delegate ref int Global(ref char a = '\n');
public delegate ref readonly int Global(ref char a = '\n');

delegate void A<T>() where T:class;

delegate void A(params int [] test);

class Z {
  delegate void Zed();
}

--------------------------------------------------------------------------------

(compilation_unit
  declaration: (delegate_declaration
    modifier: (modifier)
    type: (predefined_type)
    name: (identifier)
    parameters: (parameter_list
      parameter: (parameter
        (parameter_modifier)
        type: (predefined_type)
        name: (identifier)
        default: (equals_value_clause
          value: (character_literal
            (escape_sequence))))))
  declaration: (delegate_declaration
    modifier: (modifier)
    type: (ref_type
      type: (predefined_type))
    name: (identifier)
    parameters: (parameter_list
      parameter: (parameter
        (parameter_modifier)
        type: (predefined_type)
        name: (identifier)
        default: (equals_value_clause
          value: (character_literal
            (escape_sequence))))))
  declaration: (delegate_declaration
    modifier: (modifier)
    type: (ref_type
      type: (predefined_type))
    name: (identifier)
    parameters: (parameter_list
      parameter: (parameter
        (parameter_modifier)
        type: (predefined_type)
        name: (identifier)
        default: (equals_value_clause
          value: (character_literal
            (escape_sequence))))))
  declaration: (delegate_declaration
    type: (predefined_type)
    name: (identifier)
    type_parameters: (type_parameter_list
      type_parameter: (type_parameter
        name: (identifier)))
    parameters: (parameter_list)
    (type_parameter_constraints_clause
      target: (identifier)
      constraints: (type_parameter_constraint)))
  declaration: (delegate_declaration
    type: (predefined_type)
    name: (identifier)
    parameters: (parameter_list
      type: (array_type
        element_type: (predefined_type)
        rank: (array_rank_specifier))
      name: (identifier)))
  declaration: (class_declaration
    name: (identifier)
    body: (declaration_list
      declaration: (delegate_declaration
        type: (predefined_type)
        name: (identifier)
        parameters: (parameter_list)))))

================================================================================
Var declared equal to integer literal
================================================================================

var a = 1;

--------------------------------------------------------------------------------

(compilation_unit
  statement: (global_statement
    (local_declaration_statement
      declaration: (variable_declaration
        type: (implicit_type)
        variable_declarator: (variable_declarator
          name: (identifier)
          initializer: (equals_value_clause
            value: (integer_literal)))))))
